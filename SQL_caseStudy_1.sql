select sales from dbo.fact  order by sales ASC
select * from dbo.location
select * from dbo.Product

--1. Display the number of states present in the LocationTable.
Select DISTINCT(state) as 'uniqueState' from dbo.location

--2. 2. How many products are of regular type?
Select count(productId) as 'total count' from dbo.product where type='regular'

--3. How much spending has been done on marketing of product ID 1?
Select SUM(marketing) as 'total marketing cost' from dbo.fact where productID = 1
 
--4. What is the minimum sales of a product?
Select f.productid,f.sales,p.product from 
dbo.fact as f Join
dbo.product as p 
on f.productID = p.productid where f.sales = (select min(sales) from dbo.fact )

--5. Display the max Cost of Good Sold (COGS). 
select max(COGS) as 'max CGOS' from dbo.fact

--6. Display the details of the product where product type is coffee. 
Select * from dbo.Product where Product_Type = 'coffee'

--7. Display the details where total expenses are greater than 40. 
select * from dbo.fact where Total_Expenses >40 

--8. What is the average sales in area code 719?
select Avg(sales) from dbo.fact where Area_Code = 719

--9. Find out the total profit generated by Colorado state
select  l.state, sum(profit) as 'Total Profit'from dbo.fact as f JOIN
dbo.Location as l on f.Area_Code = l.Area_Code where f.Area_Code IN (select Area_Code from dbo.Location where state = 'colorado')
group by l.State

select  l.state, sum(profit) as 'Total Profit'from dbo.fact as f JOIN
dbo.Location as l on 
f.Area_Code = l.Area_Code where l.State = 'COLORADO'
group by l.State
--10. Display the average inventory for each product ID.
select AVG(Inventory) as 'Average Inventory', ProductId from dbo.fact group by ProductId 

--11. Display state in a sequential order in a Location Table.
 select Distinct state from dbo.Location order by state asc

--12. Display the average budget of the Product where the average budget margin should be greater than 100.
Select ProductId ,AVG(Budget_Margin) as 'Budget margin' from dbo.fact  group by ProductId  having AVG(Budget_Margin) > 10 order by ProductId 

--13. What is the total sales done on date 2010-01-01?
select sum(sales) as 'total sales' from dbo.fact where Date='2010-01-01'

--14. Display the average total expense of each product ID on an individual date.
select [Date], productid, avg(Total_Expenses) as 'Total expense' from dbo.fact group by [Date], ProductId order by [Date], ProductId
--15. Display the table with the following attributes such as date, productID, product_type, product, sales, profit, state,
select f.date, f.productID, p.product_type, p.product, f.sales, f.profit,l.state,l.area_code 
from dbo.fact as f 
join dbo.Location as l on f.Area_Code=l.Area_Code
join dbo.Product as p on f.ProductId = p.ProductId

--16. Display the rank without any gap to show the sales wise rank.
Select ProductId , sales, RANK() over (order by sales DESC) as 'SalesRank' from dbo.fact
Select ProductId , sales, DENSE_RANK() over (order by sales DESC) as 'SalesRank' from dbo.fact order by sales ASC

--17. Find the state wise profit and sales.
select l.state, f.profit, f.sales  from dbo.fact as f join dbo.location as l on l.Area_Code = f.Area_Code order by l.state DESC

--18. Find the state wise profit and sales along with the product name.
select f.Profit, f.Sales ,p.Product, l.state 
from dbo.fact as f 
join dbo.Location as l on f.Area_Code=l.Area_Code
join dbo.Product as p on f.ProductId = p.ProductId
order by State ASC

--19. If there is an increase in sales of 5%, calculate the increased sales.
select ProductId, Sales, Sales*1.05 as 'increased by 5 %' from dbo.fact order by ProductId

--20. Find the maximum profit along with the product ID and product type.
--ALL PRODUCTS MAX profit
Select max(profit) as 'Max profit', p.ProductId, p.Product_Type from dbo.fact as f join dbo.Product as p on f.ProductId = p.ProductId group by p.ProductId, p.Product_Type  
--single product max profit
SELECT 
    f.ProductID,
    p.Product_Type,
    f.Profit
FROM  dbo.fact AS f
JOIN dbo.Product AS p on f.ProductID = p.ProductID group by F.ProductId, p.Product_Type, F.Profit  
having f.Profit = (select max(Profit) FROM dbo.fact);

/*SELECT TOP 1 
    f.ProductID,
    p.Product_Type,
    f.Profit
FROM 
    dbo.fact AS f
JOIN 
    dbo.Product AS p 
    ON f.ProductID = p.ProductID
ORDER BY 
    f.Profit DESC;*/

--21. Create a stored procedure to fetch the result according to the product typefrom Product Table.
Create Procedure getProductDetail @pt varchar(50)
as
BEGIN
	SELECT f.ProductId, f.Sales, f.Profit, p.Product, p.Product_Type
	from dbo.fact as f JOIN dbo.Product as p 
	on f.ProductId = p.ProductId
	where Product_Type = @pt 
END

EXEC getProductDetail @pt = 'coffee';

--22. Write a query by creating a condition in which if the total expenses is less than 60 then it is a profit, or else loss.
SELECT ProductId, Total_Expenses,
      CASE
	      when total_expenses > 60 then 'loss'
		  when total_expenses < 60 then 'Profit'
		  else 'expense is not available'
	  END AS 'profit and loss' from dbo.fact

--23. Give the total weekly sales value with the date and product ID details. Use roll-up to pull the data in hierarchical order.
SELECT 
    DATEPART(year, f.Date) AS [Year],
    DATEPART(week, f.Date) AS [WeekNumber],
    f.ProductID,
    SUM(f.Sales) AS [TotalSales]
FROM 
    dbo.Fact AS f
GROUP BY 
    ROLLUP (DATEPART(year, f.Date), DATEPART(week, f.Date), f.ProductID)
ORDER BY 
    [Year],
    [WeekNumber],
    [ProductID];

select DATEPART(year, 2012-10-01) as 'year'
--24. Apply union and intersection operators on the tables which consist of the attribute area code.




